# 原始命令：
# docker run -d --name redis -p 6379:6379 -v  \
#   - ./config/redis.conf:/etc/redis/redis.conf \
#   - ./data:/data \
#   --network my_network redis:latest redis-server /etc/redis/redis.conf
# 版本号
# version: '3.8'
# 服务列表，命令：docker run

networks:
  # 默认将会创建为 docker-compose.yml所在 文件夹名_notes_network 网络名称
  notes_network:
    driver: bridge

services:
  next-app-prod:
    container_name: notes-app
    build:
      context: .
      dockerfile: ./docker/prod.Dockerfile
    env_file:
      - .env
      - .env.production
    # 表示容器退出时，docker会总是自动重启这个容器
    restart: always
    ports:
      - 3456:3456
    networks:
      - notes_network
    depends_on:
      mysql:
        condition: service_healthy

  # 服务名称，任意，不重复即可
  redis:
    # 指定服务名称，命令：--name redis
    # 如果不指定，则将默认用docker-compose.yml所在文件夹名_服务名称_n命名
    container_name: notes-redis
    # 指定镜像：命令 redis:latest
    image: redis:latest
    # 指定端口：命令 -p 主机端口:容器端口
    ports:
      - '6379:6379'
    # 数据容器卷
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/data
    # 加入指定网络，容器间必须要处于同一个网络才能通过容器名称进行调用
    networks:
      - notes_network
    # 运行命令
    command: redis-server /etc/redis/redis.conf

  # MySQL服务
  mysql:
    container_name: notes-mysql
    image: mysql:latest
    # 表示容器退出时总是重启，但是不考虑docker守护进程运行时就已经停止的容器
    restart: unless-stopped
    # 健康检查
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h127.0.0.1', '-P3306']
      interval: 5s
      timeout: 2s
      retries: 20
    ports:
      - '3306:3306'
    environment:
      # 通过设置host来控制哪些主机可以访问数据库，从而实现访问控制和安全性。
      # localhost：表示只允许本地主机（即数据库服务器所在的主机）访问数据库。一般不用
      # %（通配符）：表示允许任何主机通过网络访问数据库。
      # 具体IP地址：表示只允许指定的主机通过网络访问数据库。
      # 上线的时候改成公网IP
      MYSQL_ROOT_HOST: '%'
      # 等同于 -e MYSQL_ROOT_PASSWORD指定root的登录密码
      MYSQL_ROOT_PASSWORD: '522123'
      # 允许MySQL容器以空密码登录,yes允许，no不允许
      MYSQL_ALLOW_EMPTY_PASSWORD: 'no'
      # 这里这个指令compose启动成功后会自动创建名为notes的数据库
      MYSQL_DATABASE: 'notes'
      # 此处就是相当于 mysql create user，创建了数据库的登录用户
      MYSQL_USER: 'fengjin'
      MYSQL_PASSWORD: '6674757'
    volumes:
      - ./mysql/data:/var/lib/mysql
      # 这里的my.cnf可以从原来的安装的MySQL里面找，如果没有不配置也不影响，只是为了方便外部更改
      - ./mysql/config/my.cnf:/etc/my.cnf
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - notes_network
    # 解决外部无法访问
    # command: --default-authentication-plugin=caching_sha2_password
#
# docker compose -f docker-compose.dev.yml down
# docker compose -f docker-compose.dev.yml up -d
#
#
# 创建并启动容器：
# docker-compose up -d

# 停止并移除容器、网络、卷等：
# docker-compose down

# 查看服务的日志输出：
# docker-compose logs

# 列出服务的状态：
# docker-compose ps

# 构建
# docker-compose build

# 停止和重启服务：
# docker-compose stop
# docker-compose restart
